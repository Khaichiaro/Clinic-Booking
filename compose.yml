version: '3.9'
services:
  frontend:
    container_name: frontend
    build: ./frontend
    image: clinic-booking/frontend:latest
    ports:
      - "5173:5173"
    networks:
      - frontend
    restart: unless-stopped
    # volumes:
    #   - ${PWD}/frontend:/app
    #   - /app/node_modules
    depends_on:
      - user-service
      - doctor-service
      - appointment-service

  user-service:
    container_name: user-service
    build: ./backend/user-service
    image: clinic-booking/user-service:latest
    ports:
      - "5001:5001"    # Main API
    environment:
      - DATABASE_URL=postgresql://admin:1234@db:5432/mydb
    depends_on:
      - db
    networks:
      - backend
    restart: unless-stopped

  doctor-service:
    container_name: doctor-service
    build: ./backend/doctor-service
    image: clinic-booking/doctor-service:latest
    ports:
      - "5002:5002"   # Main API
    environment:
      - DATABASE_URL=postgresql://admin:1234@db:5432/mydb
    depends_on:
      - db
    networks:
      - backend
    restart: unless-stopped

  appointment-service:
    container_name: appointment-service
    build: ./backend/appointment-service
    image: clinic-booking/appointment-service:latest
    ports:
      - "5003:5003"   # Main API
    environment:
      - DATABASE_URL=postgresql://admin:1234@db:5432/mydb
    depends_on:
      - db
    networks:
      - backend
    restart: unless-stopped

  db:
    container_name: db
    image: postgres:13
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 1234
    ports:
      - "5435:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 5s
      timeout: 3s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - SCRIPT_NAME=/pgadmin
    ports:
      - "8085:80"
    networks:
      - monitoring
      - backend
    restart: unless-stopped
    

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring
      - backend
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_ROOT_URL=http://localhost/grafana/
    volumes:
      - grafana_data:/var/lib/grafana

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
      - backend
    restart: unless-stopped


  jenkins:
    container_name: jenkins
    build: ./jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
    depends_on:
      - docker-socket-proxy
    networks:
      - frontend
      - backend
    environment:
      - DOCKER_HOST=tcp://docker-socket-proxy:2375
    restart: unless-stopped

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    restart: always
    networks:
      - backend
    ports:
      - "8081:80"
    # volumes:
    #   - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - user-service
      - doctor-service
      - appointment-service
  
  reverse-proxy:
    build: ./reverse-proxy
    container_name: reverse-proxy
    restart: always
    networks:
      - frontend
      - backend
      - monitoring
    ports:
      - "80:80"
    # volumes:
    #   - ./reverse-proxy/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-gateway
      - frontend
      - grafana
      - prometheus
      - pgadmin

  docker-socket-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: docker-socket-proxy
    ports:
      - "2375:2375"  # เปิดพอร์ต TCP ให้ Jenkins ใช้ Docker ผ่าน proxy ได้
    environment:
      - CONTAINERS=1  # อนุญาตให้ proxy เข้าถึงข้อมูล container (docker ps, inspect, logs, etc.)
      - IMAGES=1      # อนุญาตให้ดึง/ลบ/จัดการ image ได้ (docker images, pull, build)
      - NETWORKS=1    # อนุญาตให้จัดการ network ได้ (docker network ls/create)
      - VOLUMES=1     # อนุญาตให้จัดการ volume ได้ (docker volume ls/create/rm)
      - SERVICES=1    # สำหรับ Swarm Mode (docker service ls) → สามารถเปิดทิ้งไว้ได้ไม่มีผลใน standalone
      - TASKS=1       # สำหรับ Swarm Mode → เช่น inspect task ของ service
      - NODES=1       # สำหรับ Swarm Mode → เช่น docker node ls
      - INFO=1        # อนุญาตให้รันคำสั่ง docker info ได้
      - SYSTEM=1      # อนุญาตให้รัน docker system commands เช่น system prune
      - POST=1         # สามารถส่ง POST ได้
      - DELETE=1       # สามารถส่ง DELETE ได้
      - BUILD=1          # สำคัญสำหรับ buildkit
      - PLUGINS=1        # ใช้ตอนเรียก build บางแบบ
      - AUTH=1           # ใช้ตอน build image แบบ login
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # mount docker.sock แบบ read-only
    networks:
      - backend


networks:
  frontend:
  backend:
  monitoring:

volumes:
  db_data:
  jenkins_home:
  grafana_data:
