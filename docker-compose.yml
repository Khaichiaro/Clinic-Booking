version: '3.9'
services:
  frontend:
    container_name: frontend
    build: ./frontend
    ports:
      - "8080:80"
    networks:
      - frontend
    restart: unless-stopped

  user-service:
    container_name: user-service
    build: ./backend/user-service
    ports:
      - "5005:5001"    # Main API
    environment:
      - DATABASE_URL=postgresql://admin:1234@db:5432/mydb
    depends_on:
      - db
    networks:
      - backend
    restart: unless-stopped

  doctor-service:
    container_name: doctor-service
    build: ./backend/doctor-service
    ports:
      - "5002:5002"   # Main API
    environment:
      - DATABASE_URL=postgresql://admin:1234@db:5432/mydb
    depends_on:
      - db
    networks:
      - backend
    restart: unless-stopped

  appointment-service:
    container_name: appointment-service
    build: ./backend/appointment-service
    ports:
      - "5003:5003"   # Main API
    environment:
      - DATABASE_URL=postgresql://admin:1234@db:5432/mydb
    depends_on:
      - db
    networks:
      - backend
    restart: unless-stopped

  db:
    container_name: db
    image: postgres:13
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 1234
    ports:
      - "5435:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 5s
      timeout: 3s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8085:80"
    networks:
      - monitoring
    restart: unless-stopped

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
      - backend
    restart: unless-stopped


  jenkins:
    container_name: jenkins
    image: jenkins/jenkins:lts
    ports:
      - "8081:8080"
    volumes:
      - jenkins_home:/var/jenkins_home
    networks:
      - frontend
      - backend
    restart: unless-stopped

  nginx:
    container_name: nginx
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - user-service
      - doctor-service
      - appointment-service
    networks:
      - frontend
      - backend
    restart: unless-stopped

networks:
  frontend:
  backend:
  monitoring:

volumes:
  db_data:
  jenkins_home:
